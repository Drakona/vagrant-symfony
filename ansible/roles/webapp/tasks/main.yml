---
- name: Check if a src folder is already present
  stat: path="{{ APPDIR }}/src"
  register: installdir

- name: initialize application
  become_user: vagrant
  # include: init_app_via_composer.yml
  include: init_app_via_installer.yml
  when: not installdir.stat.exists

- name: create parameters.yml based on parameters.yml.dist
  become_user: vagrant
  command: creates={{ APPDIR }}/app/config/parameters.yml
    cp {{ APPDIR }}/app/config/parameters.yml.dist {{ APPDIR }}/app/config/parameters.yml
  when: not installdir.stat.exists

- name: update parameters.yml database user
  replace: > # see https://github.com/ansible/ansible/issues/2769
    dest={{ APPDIR }}/app/config/parameters.yml
    regexp="{{ item.key }}:.+$"
    replace='{{ item.key }}: {{ item.value }}'
  with_items:
    - {key: database_user, value: "{{ dbuser }}" }
    - {key: database_password, value: "{{ dbpassword }}"}
  when: not installdir.stat.exists

- name: update config.yml with correct DB adapter
  replace: >
    dest={{ APPDIR }}/app/config/config.yml
    regexp="(driver:\s+)pdo_.+$"
    replace='\1{{ db_drivers[dbtype] }}'

- name: allow vagrant host to access dev frontend controller
  replace: dest={{ APPWEBROOT }}/app_dev.php
    regexp="array\('127.0.0.1'"
    replace="array('10.0.2.2', '127.0.0.1'"
  when: not installdir.stat.exists

- name: default gitignore
  copy: src=Symfony.gitignore dest={{ APPDIR }}/.gitignore force=no
  when: not installdir.stat.exists

- name: install app dependencies (composer install)
  become_user: vagrant
  command: creates={{ APPDIR }}/vendor/ chdir={{ APPDIR }}
    composer install --quiet --no-ansi --no-interaction
  when: not installdir.stat.exists
